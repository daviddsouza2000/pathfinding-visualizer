{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","col","isFinish","isStart","isWall","onMouseDown","isVisited","onMouseEnter","onMouseUp","row","extraClassName","id","className","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNeighbors","open","closed","calculateDistance","node1","node2","Math","abs","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","useState","setGrid","mouseIsPressed","setMouseIsPressed","canDraw","setCanDraw","movingStartNode","setMovingStartNode","movingFinishNode","setMovingFinishNode","useEffect","newGrid","getInitialGrid","animateDijkstra","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","classList","add","visualizeBfs","queue","currentNode","bfs","unshift","getNodesInShortestPathOrderBfs","visualizeDfs","stack","pop","dfs","getNodesInShortestPathOrderDfs","visualizeAStar","fValue","console","log","current","includes","astar","getNodesInShortestPathOrderAstar","onClick","getNodesInShortestPathOrderDijkstra","visualizeDijkstra","window","location","reload","map","rowIdx","nodeIdx","getNewGridWithWallToggled","handleMouseDown","getNewGridWithStartNodeToggled","getNewGridWithFinishNodeToggled","handleMouseEnter","currentRow","createNode","slice","newNode","newNode2","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.348507c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default function Node({ col, isFinish, isStart, isWall, isVisited, onMouseDown, onMouseEnter, onMouseUp, row}) {\r\n    const extraClassName = isFinish \r\n        ? 'node-finish' \r\n        : isStart \r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                // : isVisited\r\n                //     ? 'node-visited'\r\n                    : '';\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","export function bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    const queue = [];\r\n    queue.push(startNode);\r\n\r\n    while (queue.length) {\r\n        const currentNode = queue.shift();\r\n        \r\n        if (currentNode.isWall) continue;\r\n        \r\n        if(currentNode.isVisited) continue; \r\n\r\n        visitedNodesInOrder.push(currentNode);\r\n        currentNode.isVisited = true;\r\n\r\n        if (currentNode === finishNode) return visitedNodesInOrder;\r\n        \r\n        const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.previousNode = currentNode;\r\n        }\r\n        queue.push(...unvisitedNeighbors);\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBfs(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","export function dfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    const stack = [];\r\n    stack.push(startNode);\r\n\r\n    while (stack.length) {\r\n        const currentNode = stack.pop();\r\n        \r\n        if (currentNode.isWall) continue;\r\n        \r\n        if(currentNode.isVisited) continue; \r\n\r\n        visitedNodesInOrder.push(currentNode);\r\n        currentNode.isVisited = true;\r\n\r\n        if (currentNode === finishNode) return visitedNodesInOrder;\r\n        \r\n        const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.previousNode = currentNode;\r\n        }\r\n        stack.push(...unvisitedNeighbors);\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDfs(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","export function astar(grid, startNode, finishNode){\r\n    const visitedNodesInOrder = [];\r\n    \r\n    // nodes to be evaluted\r\n    const open = [];\r\n    // nodes already evaluated\r\n    const closed = [];\r\n    \r\n    startNode.fValue = calculateDistance(startNode, finishNode);\r\n    open.push(startNode);\r\n    while(open.length){\r\n        console.log(visitedNodesInOrder);\r\n        const current = open.shift();\r\n\r\n        if(current.isVisited) continue; \r\n\r\n        visitedNodesInOrder.push(current);\r\n        current.isVisited = true;\r\n\r\n        if (current === finishNode) return visitedNodesInOrder;\r\n\r\n        const neighbors = getNeighbors(grid, current, open, closed);\r\n\r\n        for(const neighbor of neighbors){\r\n            if(!open.includes(neighbor) && !open.includes(neighbor)){\r\n                open.push(neighbor);\r\n                const fValue = calculateDistance(startNode, neighbor) + calculateDistance(neighbor, finishNode);\r\n                if(neighbor.fValue){\r\n                    if (fValue < neighbor.fValue){\r\n                        neighbor.fValue = fValue;\r\n                        neighbor.previousNode = current;\r\n                    }\r\n                } else {\r\n                    neighbor.fValue = fValue;\r\n                    neighbor.previousNode = current;\r\n                }\r\n            }\r\n        }\r\n        closed.push(current);\r\n        sortNodesByDistance(open);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.fValue - nodeB.fValue);\r\n}\r\n\r\nfunction getNeighbors(grid, node, open, closed) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isWall);\r\n    \r\n}\r\n\r\nfunction calculateDistance(node1, node2) {\r\n    return Math.abs(node1.col - node2.col) + Math.abs(node1.row - node2.row);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, getNodesInShortestPathOrderDijkstra } from '../algorithms/dijkstra';\r\nimport { bfs, getNodesInShortestPathOrderBfs } from '../algorithms/bfs';\r\nimport { dfs, getNodesInShortestPathOrderDfs } from '../algorithms/dfs';\r\nimport { astar, getNodesInShortestPathOrderAstar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nvar START_NODE_ROW = 8;\r\nvar START_NODE_COL = 15;\r\nvar FINISH_NODE_ROW = 10;\r\nvar FINISH_NODE_COL = 35;\r\n\r\nconst GRID_ROWS = 20;\r\nconst GRID_COLS = 50;\r\n\r\nexport default function PathfindingVisualizer() {\r\n    const [grid, setGrid] = useState([]);\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n    const [canDraw, setCanDraw] = useState(true); // true if visualizer is run/ already ran to disable creating walls\r\n    const [movingStartNode, setMovingStartNode] = useState(false); // if user is moving start node\r\n    const [movingFinishNode, setMovingFinishNode] = useState(false); // if user is moving finish node\r\n\r\n    useEffect(() => {\r\n        const newGrid = getInitialGrid();\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    const handleMouseDown = (row, col) => {\r\n        if(!canDraw) return;\r\n\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n            setMovingStartNode(true);\r\n        }\r\n        else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n            setMovingFinishNode(true);\r\n        }\r\n        else {\r\n            const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n            setGrid(newGrid);\r\n        }\r\n        setMouseIsPressed(true);\r\n    }\r\n\r\n    const handleMouseEnter = (row, col) => {\r\n        if (!canDraw) return;\r\n        if (!mouseIsPressed) return;\r\n\r\n        if (movingStartNode) {\r\n            const newGrid = getNewGridWithStartNodeToggled(grid, row, col);\r\n            setGrid(newGrid);\r\n        }\r\n        else if (movingFinishNode) {\r\n            const newGrid = getNewGridWithFinishNodeToggled(grid, row, col);\r\n            setGrid(newGrid);\r\n        }\r\n        else {\r\n            const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n            setGrid(newGrid);\r\n        }\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n        setMovingStartNode(false);\r\n        setMovingFinishNode(false);\r\n        setMouseIsPressed(false);\r\n    }\r\n\r\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).classList.add('node-visited');\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).classList.add('node-shortest-path');\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    const visualizeDijkstra = () => {\r\n        if(!canDraw) return;\r\n        setCanDraw(false);\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    const visualizeBfs = () => {\r\n        if(!canDraw) return;\r\n        setCanDraw(false);\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBfs(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    const visualizeDfs = () => {\r\n        if(!canDraw) return;\r\n        setCanDraw(false);\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderDfs(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    const visualizeAStar = () => {\r\n        if(!canDraw) return;\r\n        setCanDraw(false);\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    const clearGrid = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar\">\r\n                <div className=\"dropdown\">\r\n                    <button className=\"dropbtn\">Visualize Pathfinding Algorithm  \r\n                    <i className=\"fa fa-caret-down\"></i>\r\n                    </button>\r\n                    <div className=\"dropdown-content\">\r\n                        <button onClick={() => visualizeDijkstra()}>\r\n                            Dijkstra's Algorithm\r\n                        </button>\r\n                        <button onClick={() => visualizeBfs()}>\r\n                            Breadth First Search\r\n                        </button>\r\n                        <button onClick={() => visualizeDfs()}>\r\n                            Depth First Search\r\n                        </button>\r\n                        <button onClick={() => visualizeAStar()}>\r\n                            A* Algorithm\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <button className=\"clearButton\" onClick={() => clearGrid()}>Clear</button>\r\n            </nav>\r\n            <br />\r\n\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const { row, col, isFinish, isStart, isWall, isVisited } = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        col={col}\r\n                                        isFinish={isFinish}\r\n                                        isStart={isStart}\r\n                                        isWall={isWall}\r\n                                        isVisited={isVisited}\r\n                                        mouseIsPressed={mouseIsPressed}\r\n                                        onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                                        onMouseEnter={(row, col) =>\r\n                                            handleMouseEnter(row, col)\r\n                                        }\r\n                                        onMouseUp={() => handleMouseUp()}\r\n                                        row={row}></Node>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_ROWS; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < GRID_COLS; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n\r\nconst getNewGridWithStartNodeToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[START_NODE_ROW][START_NODE_COL];\r\n    const newNode = {\r\n        ...node,\r\n        isStart: false,\r\n    };\r\n    newGrid[START_NODE_ROW][START_NODE_COL] = newNode;\r\n\r\n    START_NODE_COL = col;\r\n    START_NODE_ROW = row;\r\n\r\n    const node2 = newGrid[START_NODE_ROW][START_NODE_COL];\r\n    const newNode2 = {\r\n        ...node2,\r\n        isStart: true,\r\n        isWall: false,\r\n    };\r\n    newGrid[START_NODE_ROW][START_NODE_COL] = newNode2;\r\n\r\n    return newGrid;\r\n}\r\n\r\nconst getNewGridWithFinishNodeToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const newNode = {\r\n        ...node,\r\n        isFinish: false,\r\n    };\r\n    newGrid[FINISH_NODE_ROW][FINISH_NODE_COL] = newNode;\r\n\r\n    FINISH_NODE_COL = col;\r\n    FINISH_NODE_ROW = row;\r\n\r\n    const node2 = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const newNode2 = {\r\n        ...node2,\r\n        isFinish: true,\r\n        isWall: false,\r\n    };\r\n    newGrid[FINISH_NODE_ROW][FINISH_NODE_COL] = newNode2;\r\n\r\n    return newGrid;\r\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}